#include <stdlib.h>  // Required for generating random values

void setup()
{
    Serial.begin(115200);
    connectToWiFi();
    timeClient.begin();
    Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

    config.api_key = API_KEY;
    auth.user.email = USER_EMAIL;
    auth.user.password = USER_PASSWORD;
    config.token_status_callback = tokenStatusCallback;

    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);

    // Seed the random number generator
    randomSeed(analogRead(0));

    // Set the initial fake date and time (16th August 2024, 11:00 AM IST)
    timeClient.setEpochTime(1723804800);
}

void loop()
{
    // Generate random fake data within specified ranges
    String led1 = String(random(10, 36)); // 10 to 35 cm
    String led2 = String(random(10, 36));
    String led3 = String(random(10, 36));
    String ldr = String(random(900, 1001)); // 900 to 1000

    // Get the formatted current time
    String timeFormatted = getFormattedTime();

    // Log the generated data for verification
    Serial.println("Generated Fake Data:");
    Serial.print("LED1: ");
    Serial.println(led1);
    Serial.print("LED2: ");
    Serial.println(led2);
    Serial.print("LED3: ");
    Serial.println(led3);
    Serial.print("LDR: ");
    Serial.println(ldr);

    // Prepare and send the fake data to Firebase
    FirebaseJson json;
    json.set("fields/time/STRING_VALUE", timeFormatted);
    json.set("fields/LED1/STRING_VALUE", led1);
    json.set("fields/LED2/STRING_VALUE", led2);
    json.set("fields/LED3/STRING_VALUE", led3);
    json.set("fields/LDR/STRING_VALUE", ldr);

    String documentPath = "ledLog/" + String(timeClient.getEpochTime());

    if (Firebase.Firestore.createDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPath.c_str(), json))
    {
        Serial.println("Fake data sent successfully to Firebase");
    }
    else
    {
        Serial.print("Error sending fake data to Firebase: ");
        Serial.println(fbdo.errorReason());
    }

    // Increment the epoch time by 60 seconds (1 minute) for the next iteration
    timeClient.setEpochTime(timeClient.getEpochTime() + 60);

    delay(60000); // Wait for a minute before sending the next data
}
